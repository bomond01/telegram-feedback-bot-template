from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
)

BOT_TOKEN = ''  # 8477419298:AAFcIqxmKZL_sV7cfhZAaxB7PBrXx2Gqm7M
ADMINS = [494860919, 818906596]

CATEGORY, MESSAGE = range(2)
user_category = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[KeyboardButton("üí¨ –ñ–∞–ª–æ–±–∞"), KeyboardButton("üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"), KeyboardButton("‚ùì –í–æ–ø—Ä–æ—Å")]]
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)
    return CATEGORY

async def select_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    category = update.message.text
    if category not in ["üí¨ –ñ–∞–ª–æ–±–∞", "üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", "‚ùì –í–æ–ø—Ä–æ—Å"]:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫.")
        return CATEGORY
    user_category[update.effective_user.id] = category
    await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ —Ñ–∞–π–ª:")
    return MESSAGE

async def receive_content(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    username = user.username or "–∞–Ω–æ–Ω–∏–º"
    category = user_category.get(user.id, "‚ùî –ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    caption = f"üì• –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\nüë§ @{username}\nüìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}"

    if update.message.text:
        caption += f"\n\nüí¨ {update.message.text}"
        for adm in ADMINS: await context.bot.send_message(adm, caption)
    elif update.message.photo:
        file = update.message.photo[-1]
        for adm in ADMINS: await context.bot.send_photo(adm, file.file_id, caption)
    elif update.message.document:
        for adm in ADMINS: await context.bot.send_document(adm, update.message.document.file_id, caption)
    elif update.message.video:
        for adm in ADMINS: await context.bot.send_video(adm, update.message.video.file_id, caption)
    else:
        await update.message.reply_text("–¢–∏–ø —Ñ–∞–π–ª–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
        return MESSAGE

    await update.message.reply_text("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û—Ç–º–µ–Ω–∞.")
    return ConversationHandler.END

if __name__ == '__main__':
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={CATEGORY:[MessageHandler(filters.TEXT & ~filters.COMMAND, select_category)],
                MESSAGE:[MessageHandler(filters.TEXT | filters.PHOTO | filters.DOCUMENT | filters.VIDEO, receive_content)]},
        fallbacks=[CommandHandler("cancel", cancel)]
    )
    app.add_handler(conv)
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    app.run_polling()